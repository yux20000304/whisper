IDIR 	= ../include
ODIR	= obj
LDIR	= ../lib
SHAREDLIBVER	= 1.0.1
SHAREDSO        = libkp_kvstore.so
SHAREDSONAME    = $(SHAREDSO).1
SHAREDLIBNAME	= $(SHAREDSO).$(SHAREDLIBVER)
STATICLIBNAME	= libkp_kvstore.a
VECTOR_DIR	= vector-cdds
INCL = -I./ -I$(VECTOR_DIR)/ -Ihash_table/ -I../include -Ileveldb/include
MALLOC_DIR	= ./malloc
MALLOC_LIBS	= $(MALLOC_DIR)/lib

#  Glib flags: http://developer.gnome.org/glib/2.28/glib-compiling.html
#    Note that if you want to override the system-default lib directories
#    (i.e. on a systems lab machine) and use your own, LD_RUN_PATH must
#    be set (in addition to using the pkg-config command below)
#    Example (before "make"): export LD_RUN_PATH=$LD_RUN_PATH:$HOME/lib:leveldb/lib
#  Also: http://stackoverflow.com/questions/1435861/computing-makefile-variable-on-assignment
#    http://linuxmafia.com/faq/Admin/ld-lib-path.html
#    http://gcc.gnu.org/faq.html
#  Note that although GLib has been removed from our own kp_kvstore code,
#  GLib is still required by Thrift, if we wish to run our evaluation against
#  Cassandra.
CC 	= gcc
GLIBFLAGS	:= $(shell pkg-config --cflags glib-2.0 gthread-2.0 gobject-2.0)
GLIBLIBS	:= $(shell pkg-config --libs glib-2.0 gthread-2.0 gobject-2.0)
THRIFTFLAGS	:= $(shell pkg-config --cflags thrift_c_glib)
THRIFTLIBS	:= $(shell pkg-config --libs thrift_c_glib)
LEVELDBLIBS = -lleveldb
KPKVLIBS = -lkp_kvstore
TCMALLOC_LIBS	= -ltcmalloc_minimal
JEMALLOC_LIBS	= -ljemalloc
CFLAGS 	= $(INCL) -D_GNU_SOURCE $(THRIFTFLAGS) $(GLIBFLAGS) -g -Wall -fPIC -O2
  # -pg enables profiling with gprof(1)
  # -D_GNU_SOURCE is needed for CPU_SET macros in evaluation.c, and also
  #   needed for lock debugging
  # -fPIC: position-independent-code, needed for shared library...

# We've set up the Makefiles to use tcmalloc by default; anything built in
# this Makefile using the LIBS below will use tcmalloc, and the leveldb
# Makefile has been modified as well. Unfortunately we didn't add the
# Cassandra / Thrift source to our repository because we're stupid, so for
# Cassandra we have to use a different technique (see below). If you get 
# tcmalloc errors while _compiling_, then it probably means that you need to
# run "make tcmalloc" first (I couldn't quickly figure out how to get this
# dependency to be checked and built automatically... bah). If you get
# tcmalloc not-found errors at _runtime_, then it probably means that you
# just need to run "source source-me" in this directory (in the same shell
# that you're executing the program in).
#
# To double-check that tcmalloc is actually being used, run these commands
# and look for libtcmalloc_minimal.so.4 to appear in the list of dynamically
# loaded libraries. If libtcmalloc doesn't appear in the output of all of
# these commands, then something is wrong. If ldd shows the library in the
# list but says that it can't find it, then source source-me.
#   ldd leveldb/lib/libleveldb.so
#   ldd evaluation
LIBS	= -L$(HOME)/lib/ -L/usr/local/lib/ -L./leveldb/lib/ $(THRIFTLIBS) $(GLIBLIBS) -L$(MALLOC_LIBS) -lpthread -lrt -lm $(TCMALLOC_LIBS)
  # -lrt is for scheduler/timing stuff in evaluation.c

# To use tcmalloc with Cassandra, we can use the less-recommended technique
# of pre-loading the tcmalloc library to override calls to malloc in
# executables that weren't built with tcmalloc linked in. This technique
# is less recommended because it's just not as elegant and because it will
# impact all programs executed in the particular shell. It's good enough for
# now though. To pre-load tcmalloc for use with Cassandra, just source the
# special file that contains the correct LD_PRELOAD command:
#   source source-me-Cassandra-tcmalloc
# You can echo $LD_PRELOAD afterwards to make sure that it takes effect.

default: test_local_master evaluation
lib: kp_kvstore-static kp_kvstore-shared
all: test_local_master evaluation telescope telescope2 test_cassandra_client test_leveldb test_flush test_recovery

#################################################
DEPS 	= ./kp_kvstore_internal.h $(IDIR)/kp_kv_local.h $(IDIR)/kp_kv_master.h ./kp_macros.h ./kp_recovery.h kp_common.h PIN_hooks.h

$(ODIR)/%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)
#	cp $@ $(LDIR)

$(ODIR)/hash_table.o: hash_table/hash.c hash_table/hash.h hash_table/bitrotate.h hash_table/xalloc-oversized.h ./kp_macros.h ./kp_recovery.h kp_common.h
	$(CC) -c -o $@ $< $(CFLAGS)

$(ODIR)/vector.o: $(VECTOR_DIR)/vector.c $(VECTOR_DIR)/vector.h kp_recovery.h
	$(CC) -c -o $@ $< $(CFLAGS)

$(ODIR)/vector64.o: $(VECTOR_DIR)/vector64.c $(VECTOR_DIR)/vector64.h kp_recovery.h
	$(CC) -c -o $@ $< $(CFLAGS)

_OBJ 	= PIN_Hooks.o kp_kvstore.o kp_kv_local.o kp_kv_master.o vector.o vector64.o hash_table.o kp_recovery.o kp_common.o
OBJ 	= $(patsubst %,$(ODIR)/%,$(_OBJ))

# This test file is old and probably not worth using anymore:
#dummytest: dummy_code.c $(OBJ)
#	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

test_local_master: test_local_master.c $(OBJ)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

#################################################

tcmalloc:
	time ./make-tcmalloc.sh

jemalloc:
	time ./make-jemalloc.sh

#################################################

CASS_DEPS 	= ./kp_kvstore_internal.h ./kp_macros.h

$(ODIR)/%.o: %.c $(CASS_DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

_CASS_OBJ	= cassandra_types.o cassandra.o cassandra_client.o
CASS_OBJ	= $(patsubst %,$(ODIR)/%,$(_CASS_OBJ))

test_cassandra_client: test_cassandra_client.c $(CASS_OBJ)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

#################################################

# This LEVELDB* stuff builds leveldb_client.o:
LEVELDB_DEPS 	= ./kp_kvstore_internal.h kp_macros.h leveldb_client.h
$(ODIR)/%.o: %.c $(LEVELDB_DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)
_LEVELDB_OBJ	= leveldb_client.o
LEVELDB_OBJ		= $(patsubst %,$(ODIR)/%,$(_LEVELDB_OBJ))

# This is kind of a mess...
.PHONY: clean leveldb_lib leveldb_clean
LEVELDBDIR	= leveldb

# This target should create libleveldb.so.1[.0.1] in $LDIR.
leveldb_lib:
	make -C $(LEVELDBDIR) shared_lib

leveldb_clean:
	make -C $(LEVELDBDIR) clean

test_leveldb: test_leveldb.c leveldb_lib $(LEVELDB_OBJ)
	gcc -o $@ test_leveldb.c $(LEVELDB_OBJ) $(CFLAGS) $(LIBS) $(LEVELDBLIBS)

#################################################
_EVOBJ	= $(_OBJ) evaluation.o
EVOBJ 	= $(patsubst %,$(ODIR)/%,$(_EVOBJ))

evaluation: $(CASS_OBJ) $(EVOBJ) leveldb_lib $(LEVELDB_OBJ)
	$(CC) -o $@ $(CASS_OBJ) $(EVOBJ) $(LEVELDB_OBJ) $(CFLAGS) $(LIBS) $(LEVELDBLIBS)
evaluation-shared: $(CASS_OBJ) kp_kvstore-shared evaluation.o leveldb_lib $(LEVELDB_OBJ)
	$(CC) -o evaluation evaluation.o $(CASS_OBJ) $(LEVELDB_OBJ) $(CFLAGS) $(LIBS) $(LEVELDBLIBS) $(KPKVLIBS)
#	(this was what I used at first for shared evaluation: _EVOBJ = evaluation.o)

#################################################
_OBJT 	= telescope.o
OBJT 	= $(patsubst %,$(ODIR)/%,$(_OBJT))

telescope: $(OBJT)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

_OBJT2 	= telescope2.o
OBJT2 	= $(patsubst %,$(ODIR)/%,$(_OBJT2))

telescope2: $(OBJT2)
	$(CC) -o $@ $^ $(CFLAGS) $(LIBS)

_OBJFLUSH	= flush.o kp_timing.o
OBJFLUSH	= $(patsubst %,$(ODIR)/%,$(_OBJFLUSH))

#-lrt is needed for clock_gettime():
test_flush: test_flush.c $(OBJFLUSH)
	$(CC) -o $@ $^ -g -Wall -O2 -lrt
	$(CC) -o test_flush2 test_flush2.c -g -Wall -O2 -lrt
test_flush_assembly: test_flush.c
	$(CC) -S -o flush.s flush.c -g -Wall -O2 -lrt
	$(CC) -S -o test_flush.s test_flush.c -g -Wall -O2 -lrt

_OBJRECOVERY	= kp_recovery.o
OBJRECOVERY		= $(patsubst %,$(ODIR)/%,$(_OBJRECOVERY))

test_recovery: test_recovery.c $(OBJRECOVERY) $(ODIR)/vector.o
	$(CC) -o $@ $^ -g -Wall -O2 -I$(VECTOR_DIR)/

#################################################
_LIBOBJ 	= $(_OBJ)
LIBOBJ 	= $(patsubst %,$(ODIR)/%,$(_LIBOBJ))

# todo: remove dummy_code.o from _OBJ
# http://www.adp-gmbh.ch/cpp/gcc/create_lib.html
kp_kvstore-static: $(LIBOBJ)
	ar rcs $(ODIR)/$(STATICLIBNAME) $(LIBOBJ)
	cp $(ODIR)/$(STATICLIBNAME) $(LDIR)

kp_kvstore-shared: $(LIBOBJ)
	$(CC) -shared -Wl,-soname,$(SHAREDSONAME) -o $(SHAREDLIBNAME) $(LIBOBJ) -lc
	rm -f $(LDIR)/*.so*
	mv $(SHAREDLIBNAME) $(LDIR)
	ln -s $(LDIR)/$(SHAREDLIBNAME) $(LDIR)/$(SHAREDSONAME)
	ln -s $(LDIR)/$(SHAREDLIBNAME) $(LDIR)/$(SHAREDSO)

#################################################
clean: leveldb_clean
	rm -f $(ODIR)/*.o $(ODIR)/*.a *~ core $(INCDIR)/*~ $(SHAREDLIBNAME) $(STATICLIBNAME) $(LDIR)/$(SHAREDLIBNAME) $(LDIR)/$(STATICLIBNAME) dummytest evaluation telescope telescope2 test_cassandra_client test_local_master gmon.out test_leveldb test_flush test_flush2 test_recovery

#LIBS	= -L$(HOME)/lib/ -L/usr/local/lib/ -L./leveldb/lib/ -L$(MALLOC_LIBS) -lpthread -lrt -lm
#LIBS	= -L$(HOME)/lib/ -L/usr/local/lib/ -L./leveldb/lib/ -L$(MALLOC_LIBS) -lpthread -lrt -lm $(JEMALLOC_LIBS)
